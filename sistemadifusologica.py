# -*- coding: utf-8 -*-
"""
Created on Sat May 25 12:58:54 2024

@author: alsog
"""

# -*- coding: utf-8 -*-
"""SistemaDifusoLogica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17LPzbz7jGNSShIRuZr5wks2Aex7J-PB8
"""

import numpy as np
import matplotlib.pyplot as plt
import skfuzzy as fuzz
import skfuzzy.control as ctrl

#arreglos de posibles entradas (es un rango de posibles valores a ingresar)
arrayEntradas = np.arange(0,11, 1)
arraySalidas = np.arange(0,11, 1)
arraySalidas

#Entradas
f1 = ctrl.Antecedent(arrayEntradas, 'f1')
f2 = ctrl.Antecedent(arrayEntradas, 'f2')
f3 = ctrl.Antecedent(arrayEntradas, 'f3')

#Salidas
Nc= ctrl.Consequent(arraySalidas, 'Nc')

#Valores linguisticos de las entradas
#Progresion de notas
f1['Deficiente'] = fuzz.trapmf(f1.universe, [-1,0, 5, 6])
f1['Estable'] = fuzz.trimf(f1.universe, [5, 7, 9])
f1['Creciente'] = fuzz.trapmf(f1.universe, [8, 9, 10,11])
#Nivel de aprobacion de pruebas
f2['Debajodelamedia'] = fuzz.trapmf(f2.universe, [-1,0, 5, 6])
f2['Alrededordelamedia'] = fuzz.trimf(f2.universe,  [5, 7, 9])
f2['Arribadelamedia'] = fuzz.trapmf(f2.universe, [8, 9, 10,11])
#Nota final del curso
f3['NoSatisfactorio'] = fuzz.trapmf(f3.universe, [-1, 0, 5, 6])
f3['Satisfactorio'] = fuzz.trimf(f3.universe, [5, 7, 9])
f3['MuySatisfactorio'] = fuzz.trapmf(f3.universe, [8, 9, 10,11])

"""## Graficas de las entradas"""

f1.view()
f2.view()
f3.view()

#Valores linguisticos de las salidas

Nc['Bajorendimiento'] = fuzz.trapmf(Nc.universe, [-1, 0, 4, 6])
Nc['Mediorendimiento'] = fuzz.trimf(Nc.universe, [5, 7, 9])
Nc['Altorendimiento'] = fuzz.trapmf(Nc.universe, [8, 9, 10,11])

"""## Salida: Nivel de conocimiento"""

#Nc.view()

#Reglas
rules = [
    ctrl.Rule(f1['Deficiente'] & f2['Arribadelamedia'] & f3['MuySatisfactorio'], Nc['Altorendimiento']),
    ctrl.Rule(f1['Deficiente'] & f2['Arribadelamedia'] & f3['Satisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Deficiente'] & f2['Arribadelamedia'] & f3['NoSatisfactorio'], Nc['Bajorendimiento']),
    ctrl.Rule(f1['Deficiente'] & f2['Alrededordelamedia'] & f3['MuySatisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Deficiente'] & f2['Alrededordelamedia'] & f3['Satisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Deficiente'] & f2['Alrededordelamedia'] & f3['NoSatisfactorio'], Nc['Bajorendimiento']),
    ctrl.Rule(f1['Deficiente'] & f2['Debajodelamedia'] & f3['MuySatisfactorio'], Nc['Bajorendimiento']),
    ctrl.Rule(f1['Deficiente'] & f2['Debajodelamedia'] & f3['Satisfactorio'], Nc['Bajorendimiento']),
    ctrl.Rule(f1['Deficiente'] & f2['Debajodelamedia'] & f3['NoSatisfactorio'], Nc['Bajorendimiento']),
    ctrl.Rule(f1['Estable'] & f2['Arribadelamedia'] & f3['MuySatisfactorio'], Nc['Altorendimiento']),
    ctrl.Rule(f1['Estable'] & f2['Arribadelamedia'] & f3['Satisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Estable'] & f2['Arribadelamedia'] & f3['NoSatisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Estable'] & f2['Alrededordelamedia'] & f3['MuySatisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Estable'] & f2['Alrededordelamedia'] & f3['Satisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Estable'] & f2['Alrededordelamedia'] & f3['NoSatisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Estable'] & f2['Debajodelamedia'] & f3['MuySatisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Estable'] & f2['Debajodelamedia'] & f3['Satisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Estable'] & f2['Debajodelamedia'] & f3['NoSatisfactorio'], Nc['Bajorendimiento']),
    ctrl.Rule(f1['Creciente'] & f2['Arribadelamedia'] & f3['MuySatisfactorio'], Nc['Altorendimiento']),
    ctrl.Rule(f1['Creciente'] & f2['Arribadelamedia'] & f3['Satisfactorio'], Nc['Altorendimiento']),
    ctrl.Rule(f1['Creciente'] & f2['Arribadelamedia'] & f3['NoSatisfactorio'], Nc['Altorendimiento']),
    ctrl.Rule(f1['Creciente'] & f2['Alrededordelamedia'] & f3['MuySatisfactorio'], Nc['Altorendimiento']),
    ctrl.Rule(f1['Creciente'] & f2['Alrededordelamedia'] & f3['Satisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Creciente'] & f2['Alrededordelamedia'] & f3['NoSatisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Creciente'] & f2['Debajodelamedia'] & f3['MuySatisfactorio'], Nc['Altorendimiento']),
    ctrl.Rule(f1['Creciente'] & f2['Debajodelamedia'] & f3['Satisfactorio'], Nc['Mediorendimiento']),
    ctrl.Rule(f1['Creciente'] & f2['Debajodelamedia'] & f3['NoSatisfactorio'], Nc['Bajorendimiento']),]

#Controlador
educacionController = ctrl.ControlSystem(rules)
educacionSimulator = ctrl.ControlSystemSimulation(educacionController, flush_after_run= 1000)

# Ingresando valores
valores = []
for i in range(3):
  datos = float(input("Ingrese los valores para las 3 entradas: "))
  valores.append(datos)
valores

educacionSimulator.input['f1'] = valores[0]
educacionSimulator.input['f2'] = valores[1]
educacionSimulator.input['f3'] = valores[2]
# Calcula la salida difusa
educacionSimulator.compute()

#Grados de pertenencia
#print("=====Progresion de notas=====")
pn={} #Creando diccionario para almacenar los antecedentes
input = float(valores[0])
for i in f1.terms:
  val = np.interp(input, f1.universe, f1[i].mf)
  if (val>0.0):
    pn[i]=val
  #print(i, val)
#print("\n=====Aprobacion de notas=====")
an={}
input = float(valores[1])
for i in f2.terms:
  val = np.interp(input, f2.universe, f2[i].mf)
  if (val > 0.0):
   an[i]=val
  #print(i, val)
#print("\n=====Notas final del curso=====")
nfc={}
input = float(valores[2])
for i in f3.terms:
  val = np.interp(input, f3.universe, f3[i].mf)
  if (val>0.0):
   nfc[i]=val
nc={}
consval =[i for i in educacionSimulator.ctrl.consequents]
for i in range(len(consval)):
    ant = consval[i]
    for label, term in ant.terms.items():
        if( term.membership_value[educacionSimulator] >0.0):
            nc[label]= term.membership_value[educacionSimulator]
        #print(f"{label} {term.membership_value[educacionSimulator]}")

#Imprimir las reglas que se activan con las entradas
progresionN = [[key, value] for key, value in pn.items()]
aprobacionN = [[key, value] for key, value in an.items()]
notasfin = [[key, value] for key, value in nfc.items()]
nivcon= [[key, value] for key, value in nc.items()]


f1.view(sim=educacionSimulator)
f2.view(sim=educacionSimulator)
f3.view(sim=educacionSimulator)
print("\n")
import itertools
combinaciones = list(itertools.product(progresionN, aprobacionN,notasfin, nivcon))
valores = []
for combinacion in combinaciones:
    nombre, puntaje = combinacion[0]
    nombre2, puntaje2 = combinacion[1]
    nombre3, puntaje3 = combinacion[2]
    nombre4, puntaje4 = combinacion[3]
    vmin= min(puntaje, puntaje2, puntaje3, puntaje4)
    valores.append(vmin)
    print(f"Si Progresion de notas es {nombre} ({puntaje}) y  Nivel de aprobacion de pruebas es {nombre2} ({puntaje2}) y  Nota final de curso es {nombre3} ({puntaje3}): entonces {nombre4} ({vmin})")
#Nc.view(sim=educacionSimulator)
centroide =educacionSimulator.output["Nc"]
print(f"El centroide {centroide}")
# Define the universe of discourse
x = np.linspace(-2, 12, 500)

# Define fuzzy membership functions
bajo_rendimiento = fuzz.trapmf(x, [-1, 0, 4, 6])
medio_rendimiento = fuzz.trimf(x, [5, 7, 9])
alto_rendimiento = fuzz.trapmf(x, [8, 9, 10, 11])

# Plot the membership functions
plt.figure(figsize=(10, 5))
plt.plot(x, bajo_rendimiento, 'b', label='Bajo rendimiento')
plt.plot(x, medio_rendimiento, 'orange', label='Medio rendimiento')
plt.plot(x, alto_rendimiento, 'g', label='Alto rendimiento')

# Given point coordinates
x_point = centroide
y_point = max(valores)
# Plot the given point
plt.plot(x_point, y_point, 'ro', label='centroide')

# Add dashed lines
plt.axvline(x=x_point, color='r', linestyle='--')
plt.axhline(y=y_point, color='r', linestyle='--')

# Add labels and legend
plt.xlabel('Nivel de conocimiento')
plt.ylabel('Grado de membresía')
plt.title('Funciones de membresía y punto dado')
plt.legend()
plt.grid(True)

# Show plot
plt.show()
